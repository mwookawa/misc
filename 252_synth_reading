Lazy abstraction (CEGAR) —> bodik-style sketching (PLDI08) (CEGIS) —> programming by example (i.e., input/outputs) -> constraint-based synthesis -> ML optimization -> wrap-up journal-like paper comparing methods.

Instead of SLAM, I’m just going to show my bias and pick ranjit and rupak’s lazy abstraction paper. It is much better at showing how CEGAR can be used in practice.
http://goto.ucsd.edu/~rjhala/papers/lazy_abstraction.pdf

Sketching via CEGIS (ie, CEGAR to CEGIS)
https://people.csail.mit.edu/asolar/papers/Solar-LezamaJB08.pdf
Don’t let the concurrency throw you off. This is the first example of sketching infinite state programs and the generally recommended intro to CEGIS, which is the foundation for all practical sketching-style synthesis.

there is another really good CEGIS paper..
https://rishabhmit.bitbucket.io/papers/fmcad13.pdf
but it has a really annoying section (F.) on simple machine learning. this is a good omnibus wrap-up paper for the end of the synthesis grouping..

Flash fill (easiest I/O paper)
https://www.microsoft.com/en-us/research/wp-content/uploads/2016/12/popl11-synthesis.pdf

I prefer this paper for programming by example, but I have a natural bias towards data structure reasoning. In my head, this is extremely simple, but from presenting this multiple times in a group setting, I don’t think I was very successful..
https://www.cs.rice.edu/~sc40/pubs/pldi15.pdf

This paper generalizes all the different flashfill-components, but it is a bit obtuse compared to the extremely direct popl11 paper. I haven’t tried to present this paper in a group setting.
https://www.microsoft.com/en-us/research/wp-content/uploads/2016/12/pldi14-tds.pdf

Constraint-based synthesis (sketching finds the first satisfying program. Synapse finds the optimal). This paper is much more fun than the POPL10 paper.
http://synapse.uwplse.org/synapse-popl16.pdf

This is the first constraint-based synthesis paper, but it is very obtuse :/ https://www.microsoft.com/en-us/research/wp-content/uploads/2016/12/popl10_synthesis.pdf

(First) and fundamental concepts for using machine learning to increase speed of program synthesis (with no neural network magic)
https://www.microsoft.com/en-us/research/wp-content/uploads/2016/11/83-A-Machine-Learning-Framework-for-Programming-by-Example.pdf


**final reading list**

- http://goto.ucsd.edu/~rjhala/papers/lazy_abstraction.pdf
-- Practial applied CEGAR

- https://people.csail.mit.edu/asolar/papers/Solar-LezamaJB08.pdf
-- from CEGAR to CEGIS. Yes, this applies it to bounded concurrency, which adds an unimportant layer of complexity, but the vast majority of the paper is just inductive sketching. 
-- there are a huge number of CEGIS papers, and it looks like ras bodik actually prefers the first rosette paper, but i find it to be far too general.

- https://www.microsoft.com/en-us/research/wp-content/uploads/2016/12/popl11-synthesis.pdf
-- Program synthesis using input/output examples (ie programming by example). 
-- the first and classic paper. also the most practical and demonstrates that this is not just PL theory.

- http://synapse.uwplse.org/synapse-popl16.pdf
-- constraint-based synthesis. pure proof search with a cool twist (optimal program w/rt a goal function)

- https://www.microsoft.com/en-us/research/wp-content/uploads/2016/11/83-A-Machine-Learning-Framework-for-Programming-by-Example.pdf
-- using machine learning to speed up program synthesis: this is, i think, the most straightforward paper in which the predictor uses semantic information

- https://rishabhmit.bitbucket.io/papers/fmcad13.pdf
-- omnibus wrap-up of program synthesis. all the above methods compared subjectively and then empirically for efficiency.

